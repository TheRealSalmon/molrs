use std::str::FromStr;

pub struct ElementParseError {
    pub details: String,
}

#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Default)]
pub enum Element {
    #[default]
    Star,
    H,
    He,
    Li,
    Be,
    B,
    C,
    N,
    O,
    F,
    Ne,
    Na,
    Mg,
    Al,
    Si,
    P,
    S,
    Cl,
    Ar,
    K,
    Ca,
    Sc,
    Ti,
    V,
    Cr,
    Mn,
    Fe,
    Co,
    Ni,
    Cu,
    Zn,
    Ga,
    Ge,
    As,
    Se,
    Br,
    Kr,
    Rb,
    Sr,
    Y,
    Zr,
    Nb,
    Mo,
    Tc,
    Ru,
    Rh,
    Pd,
    Ag,
    Cd,
    In,
    Sn,
    Sb,
    Te,
    I,
    Xe,
    Cs,
    Ba,
    Hf,
    Ta,
    W,
    Re,
    Os,
    Ir,
    Pt,
    Au,
    Hg,
    Tl,
    Pb,
    Bi,
    Po,
    At,
    Rn,
    Fr,
    Ra,
    Rf,
    Db,
    Sg,
    Bh,
    Hs,
    Mt,
    Ds,
    Rg,
    Cn,
    Nh,
    Fl,
    Mc,
    Lv,
    Ts,
    Og,
    La,
    Ce,
    Pr,
    Nd,
    Pm,
    Sm,
    Eu,
    Gd,
    Tb,
    Dy,
    Ho,
    Er,
    Tm,
    Yb,
    Lu,
    Ac,
    Th,
    Pa,
    U,
    Np,
    Pu,
    Am,
    Cm,
    Bk,
    Cf,
    Es,
    Fm,
    Md,
    No,
    Lr,
}

impl FromStr for Element {
    type Err = ElementParseError;

    /// Returns the atomic symbol.
    fn from_str(symbol: &str) -> Result<Self, Self::Err> {
        match symbol.to_lowercase().as_str() {
            "*" => Ok(Element::Star),
            "h" => Ok(Element::H),
            "he" => Ok(Element::He),
            "li" => Ok(Element::Li),
            "be" => Ok(Element::Be),
            "b" => Ok(Element::B),
            "c" => Ok(Element::C),
            "n" => Ok(Element::N),
            "o" => Ok(Element::O),
            "f" => Ok(Element::F),
            "ne" => Ok(Element::Ne),
            "na" => Ok(Element::Na),
            "mg" => Ok(Element::Mg),
            "al" => Ok(Element::Al),
            "si" => Ok(Element::Si),
            "p" => Ok(Element::P),
            "s" => Ok(Element::S),
            "cl" => Ok(Element::Cl),
            "ar" => Ok(Element::Ar),
            "k" => Ok(Element::K),
            "ca" => Ok(Element::Ca),
            "sc" => Ok(Element::Sc),
            "ti" => Ok(Element::Ti),
            "v" => Ok(Element::V),
            "cr" => Ok(Element::Cr),
            "mn" => Ok(Element::Mn),
            "fe" => Ok(Element::Fe),
            "co" => Ok(Element::Co),
            "ni" => Ok(Element::Ni),
            "cu" => Ok(Element::Cu),
            "zn" => Ok(Element::Zn),
            "ga" => Ok(Element::Ga),
            "ge" => Ok(Element::Ge),
            "as" => Ok(Element::As),
            "se" => Ok(Element::Se),
            "br" => Ok(Element::Br),
            "kr" => Ok(Element::Kr),
            "rb" => Ok(Element::Rb),
            "sr" => Ok(Element::Sr),
            "y" => Ok(Element::Y),
            "zr" => Ok(Element::Zr),
            "nb" => Ok(Element::Nb),
            "mo" => Ok(Element::Mo),
            "tc" => Ok(Element::Tc),
            "ru" => Ok(Element::Ru),
            "rh" => Ok(Element::Rh),
            "pd" => Ok(Element::Pd),
            "ag" => Ok(Element::Ag),
            "cd" => Ok(Element::Cd),
            "in" => Ok(Element::In),
            "sn" => Ok(Element::Sn),
            "sb" => Ok(Element::Sb),
            "te" => Ok(Element::Te),
            "i" => Ok(Element::I),
            "xe" => Ok(Element::Xe),
            "cs" => Ok(Element::Cs),
            "ba" => Ok(Element::Ba),
            "hf" => Ok(Element::Hf),
            "ta" => Ok(Element::Ta),
            "w" => Ok(Element::W),
            "re" => Ok(Element::Re),
            "os" => Ok(Element::Os),
            "ir" => Ok(Element::Ir),
            "pt" => Ok(Element::Pt),
            "au" => Ok(Element::Au),
            "hg" => Ok(Element::Hg),
            "tl" => Ok(Element::Tl),
            "pb" => Ok(Element::Pb),
            "bi" => Ok(Element::Bi),
            "po" => Ok(Element::Po),
            "at" => Ok(Element::At),
            "rn" => Ok(Element::Rn),
            "fr" => Ok(Element::Fr),
            "ra" => Ok(Element::Ra),
            "rf" => Ok(Element::Rf),
            "db" => Ok(Element::Db),
            "sg" => Ok(Element::Sg),
            "bh" => Ok(Element::Bh),
            "hs" => Ok(Element::Hs),
            "mt" => Ok(Element::Mt),
            "ds" => Ok(Element::Ds),
            "rg" => Ok(Element::Rg),
            "cn" => Ok(Element::Cn),
            "nh" => Ok(Element::Nh),
            "fl" => Ok(Element::Fl),
            "mc" => Ok(Element::Mc),
            "lv" => Ok(Element::Lv),
            "ts" => Ok(Element::Ts),
            "og" => Ok(Element::Og),
            "la" => Ok(Element::La),
            "ce" => Ok(Element::Ce),
            "pr" => Ok(Element::Pr),
            "nd" => Ok(Element::Nd),
            "pm" => Ok(Element::Pm),
            "sm" => Ok(Element::Sm),
            "eu" => Ok(Element::Eu),
            "gd" => Ok(Element::Gd),
            "tb" => Ok(Element::Tb),
            "dy" => Ok(Element::Dy),
            "ho" => Ok(Element::Ho),
            "er" => Ok(Element::Er),
            "tm" => Ok(Element::Tm),
            "yb" => Ok(Element::Yb),
            "lu" => Ok(Element::Lu),
            "ac" => Ok(Element::Ac),
            "th" => Ok(Element::Th),
            "pa" => Ok(Element::Pa),
            "u" => Ok(Element::U),
            "np" => Ok(Element::Np),
            "pu" => Ok(Element::Pu),
            "am" => Ok(Element::Am),
            "cm" => Ok(Element::Cm),
            "bk" => Ok(Element::Bk),
            "cf" => Ok(Element::Cf),
            "es" => Ok(Element::Es),
            "fm" => Ok(Element::Fm),
            "md" => Ok(Element::Md),
            "no" => Ok(Element::No),
            "lr" => Ok(Element::Lr),
            _ => Err(ElementParseError {
                details: format!("invalid element {}", symbol),
            }),
        }
    }
}

impl From<&Element> for String {
    /// Returns the atomic symbol.
    fn from(element: &Element) -> Self {
        let symbol = match element {
            Element::Star => "*",
            Element::H => "H",
            Element::He => "He",
            Element::Li => "Li",
            Element::Be => "Be",
            Element::B => "B",
            Element::C => "C",
            Element::N => "N",
            Element::O => "O",
            Element::F => "F",
            Element::Ne => "Ne",
            Element::Na => "Na",
            Element::Mg => "Mg",
            Element::Al => "Al",
            Element::Si => "Si",
            Element::P => "P",
            Element::S => "S",
            Element::Cl => "Cl",
            Element::Ar => "Ar",
            Element::K => "K",
            Element::Ca => "Ca",
            Element::Sc => "Sc",
            Element::Ti => "Ti",
            Element::V => "V",
            Element::Cr => "Cr",
            Element::Mn => "Mn",
            Element::Fe => "Fe",
            Element::Co => "Co",
            Element::Ni => "Ni",
            Element::Cu => "Cu",
            Element::Zn => "Zn",
            Element::Ga => "Ga",
            Element::Ge => "Ge",
            Element::As => "As",
            Element::Se => "Se",
            Element::Br => "Br",
            Element::Kr => "Kr",
            Element::Rb => "Rb",
            Element::Sr => "Sr",
            Element::Y => "Y",
            Element::Zr => "Zr",
            Element::Nb => "Nb",
            Element::Mo => "Mo",
            Element::Tc => "Tc",
            Element::Ru => "Ru",
            Element::Rh => "Rh",
            Element::Pd => "Pd",
            Element::Ag => "Ag",
            Element::Cd => "Cd",
            Element::In => "In",
            Element::Sn => "Sn",
            Element::Sb => "Sb",
            Element::Te => "Te",
            Element::I => "I",
            Element::Xe => "Xe",
            Element::Cs => "Cs",
            Element::Ba => "Ba",
            Element::Hf => "Hf",
            Element::Ta => "Ta",
            Element::W => "W",
            Element::Re => "Re",
            Element::Os => "Os",
            Element::Ir => "Ir",
            Element::Pt => "Pt",
            Element::Au => "Au",
            Element::Hg => "Hg",
            Element::Tl => "Tl",
            Element::Pb => "Pb",
            Element::Bi => "Bi",
            Element::Po => "Po",
            Element::At => "At",
            Element::Rn => "Rn",
            Element::Fr => "Fr",
            Element::Ra => "Ra",
            Element::Rf => "Rf",
            Element::Db => "Db",
            Element::Sg => "Sg",
            Element::Bh => "Bh",
            Element::Hs => "Hs",
            Element::Mt => "Mt",
            Element::Ds => "Ds",
            Element::Rg => "Rg",
            Element::Cn => "Cn",
            Element::Nh => "Nh",
            Element::Fl => "Fl",
            Element::Mc => "Mc",
            Element::Lv => "Lv",
            Element::Ts => "Ts",
            Element::Og => "Og",
            Element::La => "La",
            Element::Ce => "Ce",
            Element::Pr => "Pr",
            Element::Nd => "Nd",
            Element::Pm => "Pm",
            Element::Sm => "Sm",
            Element::Eu => "Eu",
            Element::Gd => "Gd",
            Element::Tb => "Tb",
            Element::Dy => "Dy",
            Element::Ho => "Ho",
            Element::Er => "Er",
            Element::Tm => "Tm",
            Element::Yb => "Yb",
            Element::Lu => "Lu",
            Element::Ac => "Ac",
            Element::Th => "Th",
            Element::Pa => "Pa",
            Element::U => "U",
            Element::Np => "Np",
            Element::Pu => "Pu",
            Element::Am => "Am",
            Element::Cm => "Cm",
            Element::Bk => "Bk",
            Element::Cf => "Cf",
            Element::Es => "Es",
            Element::Fm => "Fm",
            Element::Md => "Md",
            Element::No => "No",
            Element::Lr => "Lr",
        };

        symbol.to_owned()
    }
}

impl From<&Element> for u8 {
    /// Returns the atomic number.
    fn from(element: &Element) -> Self {
        match element {
            Element::Star => 0,
            Element::H => 1,
            Element::He => 2,
            Element::Li => 3,
            Element::Be => 4,
            Element::B => 5,
            Element::C => 6,
            Element::N => 7,
            Element::O => 8,
            Element::F => 9,
            Element::Ne => 10,
            Element::Na => 11,
            Element::Mg => 12,
            Element::Al => 13,
            Element::Si => 14,
            Element::P => 15,
            Element::S => 16,
            Element::Cl => 17,
            Element::Ar => 18,
            Element::K => 19,
            Element::Ca => 20,
            Element::Sc => 21,
            Element::Ti => 22,
            Element::V => 23,
            Element::Cr => 24,
            Element::Mn => 25,
            Element::Fe => 26,
            Element::Co => 27,
            Element::Ni => 28,
            Element::Cu => 29,
            Element::Zn => 30,
            Element::Ga => 31,
            Element::Ge => 32,
            Element::As => 33,
            Element::Se => 34,
            Element::Br => 35,
            Element::Kr => 36,
            Element::Rb => 37,
            Element::Sr => 38,
            Element::Y => 39,
            Element::Zr => 40,
            Element::Nb => 41,
            Element::Mo => 42,
            Element::Tc => 43,
            Element::Ru => 44,
            Element::Rh => 45,
            Element::Pd => 46,
            Element::Ag => 47,
            Element::Cd => 48,
            Element::In => 49,
            Element::Sn => 50,
            Element::Sb => 51,
            Element::Te => 52,
            Element::I => 53,
            Element::Xe => 54,
            Element::Cs => 55,
            Element::Ba => 56,
            Element::Hf => 72,
            Element::Ta => 73,
            Element::W => 74,
            Element::Re => 75,
            Element::Os => 76,
            Element::Ir => 77,
            Element::Pt => 78,
            Element::Au => 79,
            Element::Hg => 80,
            Element::Tl => 81,
            Element::Pb => 82,
            Element::Bi => 83,
            Element::Po => 84,
            Element::At => 85,
            Element::Rn => 86,
            Element::Fr => 87,
            Element::Ra => 88,
            Element::Rf => 104,
            Element::Db => 105,
            Element::Sg => 106,
            Element::Bh => 107,
            Element::Hs => 108,
            Element::Mt => 109,
            Element::Ds => 110,
            Element::Rg => 111,
            Element::Cn => 112,
            Element::Nh => 113,
            Element::Fl => 114,
            Element::Mc => 115,
            Element::Lv => 116,
            Element::Ts => 117,
            Element::Og => 118,
            Element::La => 57,
            Element::Ce => 58,
            Element::Pr => 59,
            Element::Nd => 60,
            Element::Pm => 61,
            Element::Sm => 62,
            Element::Eu => 63,
            Element::Gd => 64,
            Element::Tb => 65,
            Element::Dy => 66,
            Element::Ho => 67,
            Element::Er => 68,
            Element::Tm => 69,
            Element::Yb => 70,
            Element::Lu => 71,
            Element::Ac => 89,
            Element::Th => 90,
            Element::Pa => 91,
            Element::U => 92,
            Element::Np => 93,
            Element::Pu => 94,
            Element::Am => 95,
            Element::Cm => 96,
            Element::Bk => 97,
            Element::Cf => 98,
            Element::Es => 99,
            Element::Fm => 100,
            Element::Md => 101,
            Element::No => 102,
            Element::Lr => 103,
        }
    }
}

impl Element {
    pub fn default_isotope(&self) -> usize {
        match self {
            Element::Star => 0,
            Element::H => 1,
            Element::He => 4,
            Element::Li => 7,
            Element::Be => 9,
            Element::B => 11,
            Element::C => 12,
            Element::N => 14,
            Element::O => 16,
            Element::F => 19,
            Element::Ne => 20,
            Element::Na => 23,
            Element::Mg => 24,
            Element::Al => 27,
            Element::Si => 28,
            Element::P => 31,
            Element::S => 32,
            Element::Cl => 35,
            Element::Ar => 40,
            Element::K => 39,
            Element::Ca => 40,
            Element::Sc => 45,
            Element::Ti => 48,
            Element::V => 51,
            Element::Cr => 52,
            Element::Mn => 55,
            Element::Fe => 56,
            Element::Co => 59,
            Element::Ni => 59,
            Element::Cu => 64,
            Element::Zn => 65,
            Element::Ga => 70,
            Element::Ge => 73,
            Element::As => 75,
            Element::Se => 79,
            Element::Br => 80,
            Element::Kr => 84,
            Element::Rb => 85,
            Element::Sr => 88,
            Element::Y => 89,
            Element::Zr => 91,
            Element::Nb => 93,
            Element::Mo => 96,
            Element::Tc => 98,
            Element::Ru => 101,
            Element::Rh => 103,
            Element::Pd => 106,
            Element::Ag => 108,
            Element::Cd => 112,
            Element::In => 115,
            Element::Sn => 119,
            Element::Sb => 122,
            Element::Te => 128,
            Element::I => 127,
            Element::Xe => 131,
            Element::Cs => 133,
            Element::Ba => 137,
            Element::Hf => 178,
            Element::Ta => 181,
            Element::W => 184,
            Element::Re => 186,
            Element::Os => 190,
            Element::Ir => 192,
            Element::Pt => 195,
            Element::Au => 197,
            Element::Hg => 201,
            Element::Tl => 204,
            Element::Pb => 207,
            Element::Bi => 209,
            Element::Po => 209,
            Element::At => 210,
            Element::Rn => 222,
            Element::Fr => 223,
            Element::Ra => 226,
            Element::Rf => 267,
            Element::Db => 268,
            Element::Sg => 269,
            Element::Bh => 270,
            Element::Hs => 269,
            Element::Mt => 278,
            Element::Ds => 281,
            Element::Rg => 281,
            Element::Cn => 285,
            Element::Nh => 284,
            Element::Fl => 289,
            Element::Mc => 288,
            Element::Lv => 293,
            Element::Ts => 292,
            Element::Og => 294,
            Element::La => 139,
            Element::Ce => 140,
            Element::Pr => 141,
            Element::Nd => 144,
            Element::Pm => 145,
            Element::Sm => 150,
            Element::Eu => 152,
            Element::Gd => 157,
            Element::Tb => 159,
            Element::Dy => 162,
            Element::Ho => 165,
            Element::Er => 167,
            Element::Tm => 169,
            Element::Yb => 173,
            Element::Lu => 175,
            Element::Ac => 227,
            Element::Th => 232,
            Element::Pa => 231,
            Element::U => 238,
            Element::Np => 237,
            Element::Pu => 244,
            Element::Am => 243,
            Element::Cm => 247,
            Element::Bk => 247,
            Element::Cf => 251,
            Element::Es => 252,
            Element::Fm => 257,
            Element::Md => 258,
            Element::No => 259,
            Element::Lr => 262,
        }
    }

    pub fn n_val_electrons(&self) -> u8 {
        match self {
            Element::Star => 4,
            Element::H => 1,
            Element::He => 2,
            Element::Li => 1,
            Element::Be => 2,
            Element::B => 3,
            Element::C => 4,
            Element::N => 5,
            Element::O => 6,
            Element::F => 7,
            Element::Ne => 8,
            Element::Na => 1,
            Element::Mg => 2,
            Element::Al => 3,
            Element::Si => 4,
            Element::P => 5,
            Element::S => 6,
            Element::Cl => 7,
            Element::Ar => 8,
            Element::K => 1,
            Element::Ca => 2,
            Element::Sc => 3,
            Element::Ti => 4,
            Element::V => 5,
            Element::Cr => 6,
            Element::Mn => 7,
            Element::Fe => 8,
            Element::Co => 9,
            Element::Ni => 10,
            Element::Cu => 11,
            Element::Zn => 12,
            Element::Ga => 3,
            Element::Ge => 4,
            Element::As => 5,
            Element::Se => 6,
            Element::Br => 7,
            Element::Kr => 8,
            Element::Rb => 1,
            Element::Sr => 2,
            Element::Y => 3,
            Element::Zr => 4,
            Element::Nb => 5,
            Element::Mo => 6,
            Element::Tc => 7,
            Element::Ru => 8,
            Element::Rh => 9,
            Element::Pd => 10,
            Element::Ag => 11,
            Element::Cd => 12,
            Element::In => 3,
            Element::Sn => 4,
            Element::Sb => 5,
            Element::Te => 6,
            Element::I => 7,
            Element::Xe => 8,
            Element::Cs => 1,
            Element::Ba => 2,
            Element::Hf => 4,
            Element::Ta => 5,
            Element::W => 6,
            Element::Re => 7,
            Element::Os => 8,
            Element::Ir => 9,
            Element::Pt => 10,
            Element::Au => 11,
            Element::Hg => 12,
            Element::Tl => 13,
            Element::Pb => 14,
            Element::Bi => 15,
            Element::Po => 16,
            Element::At => 17,
            Element::Rn => 18,
            Element::Fr => 1,
            Element::Ra => 2,
            Element::Rf => 4,
            Element::Db => 5,
            Element::Sg => 6,
            Element::Bh => 7,
            Element::Hs => 8,
            Element::Mt => 9,
            Element::Ds => 10,
            Element::Rg => 11,
            Element::Cn => 12,
            Element::Nh => 13,
            Element::Fl => 14,
            Element::Mc => 15,
            Element::Lv => 16,
            Element::Ts => 17,
            Element::Og => 18,
            Element::La => todo!(),
            Element::Ce => todo!(),
            Element::Pr => todo!(),
            Element::Nd => todo!(),
            Element::Pm => todo!(),
            Element::Sm => todo!(),
            Element::Eu => todo!(),
            Element::Gd => todo!(),
            Element::Tb => todo!(),
            Element::Dy => todo!(),
            Element::Ho => todo!(),
            Element::Er => todo!(),
            Element::Tm => todo!(),
            Element::Yb => todo!(),
            Element::Lu => todo!(),
            Element::Ac => todo!(),
            Element::Th => todo!(),
            Element::Pa => todo!(),
            Element::U => todo!(),
            Element::Np => todo!(),
            Element::Pu => todo!(),
            Element::Am => todo!(),
            Element::Cm => todo!(),
            Element::Bk => todo!(),
            Element::Cf => todo!(),
            Element::Es => todo!(),
            Element::Fm => todo!(),
            Element::Md => todo!(),
            Element::No => todo!(),
            Element::Lr => todo!(),
        }
    }

    pub fn maximum_valence(&self, charge: i8, expanded_octet: bool) -> u8 {
        let n_val_electrons = self.n_val_electrons() as i8;
        let n_val_electrons_with_charge = n_val_electrons - charge;

        let atomic_number = u8::from(self);
        if atomic_number <= 10 || !expanded_octet {
            4 - (4 - n_val_electrons_with_charge).unsigned_abs()
        } else if atomic_number <= 54 {
            (4 - (4 - n_val_electrons_with_charge).abs()
                + 2 * (n_val_electrons_with_charge - 4).min(n_val_electrons - 4)) as u8
        } else {
            todo!()
        }
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_atomic_symbol_maximum_valence() {
        let test_data = [
            (Element::B, 0, 3),
            (Element::B, -1, 4),
            (Element::C, 1, 3),
            (Element::C, 0, 4),
            (Element::C, -1, 3),
            (Element::N, 1, 4),
            (Element::N, 0, 3),
            (Element::N, -1, 2),
            (Element::O, 1, 3),
            (Element::O, 0, 2),
            (Element::O, -1, 1),
            (Element::P, 1, 4),
            (Element::P, 0, 5),
            // (Element::P, -1, 6),
            (Element::S, 2, 4),
            (Element::S, 1, 5),
            (Element::S, 0, 6),
            (Element::S, -1, 5),
            (Element::Cl, 3, 4),
            (Element::Cl, 2, 5),
            (Element::Cl, 1, 6),
            (Element::Cl, 0, 7),
            (Element::Cl, -1, 6),
            (Element::Br, 3, 4),
            (Element::Br, 2, 5),
            (Element::Br, 1, 6),
            (Element::Br, 0, 7),
            (Element::Br, -1, 6),
            (Element::I, 3, 4),
            (Element::I, 2, 5),
            (Element::I, 1, 6),
            (Element::I, 0, 7),
            (Element::I, -1, 6),
        ];
        for (element, charge, valence) in test_data {
            assert_eq!(element.maximum_valence(charge, true), valence);
        }
    }
}
